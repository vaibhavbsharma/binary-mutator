#!/bin/bash
#
# measureOobc
#
# @author: Taejoon Byun <taejoon@umn.edu>
#
# first: Dec 11 2017
# last : Dec 12 2017

if [ "$#" -ne 2 -a "$#" -ne 3 ]; then
  echo -e "$HEADER Invalid number of arguments"
  echo "  \$1: system dir"
  echo "  \$2: out dir"
  exit 1
fi

source config.sh $1 $2 $3

HEADER="$PURPLE[measureOobc]$ENDL"

BINARY_MUTATOR=$TOOL_ROOT/make-mutants.pl
MAX_PARALLEL=$((MAX_CORES * 2))
DELAY_SECS=0.2


function generate_binary_mutants() {
  [ "$#" -ne 1 ] && { \
    exception "generate_binary_mutants()" "Illegal #args"; exit 1; }
  local bin=$1; local bindir=$(get_bin_dir)
  for func in $(cat $(get_flist)); do
    #echo -e "$HEADER$BLUE $BINARY_MUTATOR $GREEN$(relpath $bindir/$bin) $func$ENDL"
    $BINARY_MUTATOR $bindir/$bin $func > /dev/null
    cp $bindir/$bin $bindir/$bin-mutants/$bin-correct
  done
}

# make & generate binary mutants
make_binaries
for bin in $(get_binaries); do
  if [ -d "$(get_binary_mutants_dir $bin)" ]; then
    # already exists
    echo -e "$HEADER$BLUE Binary mutants for $GREEN$bin$BLUE already exist$ENDL"
    continue
  fi
  echo -e "$HEADER$BLUE Generating binary mutants for$GREEN $bin$ENDL"
  generate_binary_mutants $bin &
done
wait

function run_master_suite_on_mutants() {
  [ "$#" -ne 2 ] && { \
    exception $HEADER"::run_master_suite_on_mutants" "Invalid #args"; exit 1; }
  local bin=$1; local mut=$2
  #echo -e "$HEADER$GREEN $bin $mut$ENDL"
  for tc in $(get_splitted_test_cases); do
    trace=$(get_bintrace $bin $mut $tc)
    ./$mut $tc $trace
    # print the info if the size of $trace was 0
    [ -f $trace -a -s $trace ] || echo -e "$(readlink -f $mut) $tc $trace"
    #else
    #  { ./$mut $tc $trace > /dev/null;
    #    #[ $? -eq 139 ] && echo "segfault @ $mut `basename $tc` ";
    #  } 2> /dev/null
    #fi
  done
}

function generate_traces() {
  for binary in $(get_binaries); do
    cd $(get_binary_mutants_dir $binary)
    i=0; cnt=$(echo $(get_binary_mutants $binary) | wc -w)
    echo -e "$HEADER$BLUE Running$GREEN $cnt ${BLUE}mutants of$GREEN $binary$ENDL"
    echo -e "$HEADER The following cases are likely to be faulty"
    for mutant in $(get_binary_mutants $binary); do
      run_master_suite_on_mutants $binary $mutant &
      i=$((i+1)) ; print_parallel_progress $i $cnt "mutants"
    done
    wait
    printf "\n"
  done
}

generate_traces

cd $TOOL_ROOT
exit

# mutation testing code had been truncated
